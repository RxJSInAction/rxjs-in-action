{"version":3,"file":"runtime.js","sources":["utils/url.js","utils/tag.js","initial.js","console.js","utils/cookies.js","editors.js","runtime.js"],"sourcesContent":["/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\nexport function getUrlParams(url) {\r\n  let match,\r\n    pl     = /\\+/g,  // Regex for replacing addition symbol with a space\r\n    search = /([^&=]+)=?([^&]*)/g,\r\n    decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\r\n    query  = url.substring(1);\r\n\r\n  const urlParams = {};\r\n  while (match = search.exec(query))\r\n    urlParams[decode(match[1])] = decode(match[2]);\r\n\r\n  return urlParams;\r\n}","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\nexport function buildTag(tagName, options, transform = x => x) {\r\n  return (source) => {\r\n    const attrs = [];\r\n    for (let k in options) {\r\n      options.hasOwnProperty(k) && attrs.push(`${k}=\"${options[k]}\"`);\r\n    }\r\n\r\n    return `<${tagName} ${attrs.join(' ')}>${transform(source)}</${tagName}>`;\r\n  };\r\n}","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\nexport const defaultHtml =\r\n  `\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width\">\r\n    <title>RxJS in Action</title>\r\n  </head>\r\n  <body></body>\r\n</html>\r\n`.trim();","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\nexport function consoleProxy(console = window.console) {\r\n  if(console && console.log) {\r\n    //Set up iframe for redirection\r\n    let iframe = parent.document.getElementById('console');\r\n    let consoleFrame = iframe.contentWindow || iframe.contentDocument;\r\n    if (consoleFrame.document) consoleFrame = consoleFrame.document;\r\n    let write = (frame => {\r\n      return content => {\r\n        frame.open();\r\n        frame.write(content);\r\n        frame.close();\r\n      };\r\n    })(consoleFrame);\r\n    write(''); // clear contents on change\r\n\r\n    window.console = {\r\n      log: (val) => {\r\n        let previous = consoleFrame.body.innerHTML || '';\r\n        write(previous.trim() + \"<br />\" + val);\r\n      },\r\n      warn: (val) => {\r\n        let previous = consoleFrame.body.innerHTML || '';\r\n        write(previous.trim() + \"<br />\" + val);\r\n      },\r\n      error: (val) => {\r\n        let previous = consoleFrame.body.innerHTML || '';\r\n        write(previous.trim() + \"<br />\" + val);\r\n      }\r\n    };\r\n  }\r\n}","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\n\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nclass CookieManager {\r\n  constructor() {\r\n    this._changed = new Subject();\r\n  }\r\n  _notifyChanged(key) {\r\n    this._changed.next(key);\r\n  }\r\n  setCookie(key, value, opts = {}) {\r\n    const {path, expires} = opts;\r\n    let cookie = [`${key}=${value}`];\r\n    path && cookie.push(`path=${path}`);\r\n    expires && cookie.push(`expires=${expires}`);\r\n    document.cookie = cookie.join('; ');\r\n    this._notifyChanged(key);\r\n  }\r\n\r\n  static removeCookie(key) {\r\n    document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:01 GMT;`;\r\n  }\r\n\r\n  getCookie(key) {\r\n    return Observable.defer(() => {\r\n      const cookies = document.cookie;\r\n      const cookieStart = cookies.indexOf(key);\r\n\r\n      if (cookieStart < 0)\r\n        return Observable.empty();\r\n      else {\r\n        const valueStart = cookies.indexOf('=', cookieStart) + 1;\r\n        let cookieEnd = cookies.indexOf(';', cookieStart);\r\n        cookieEnd = cookieEnd < 0 ? cookies.length : cookieEnd;\r\n\r\n        return Observable.of(cookies.substring(valueStart, cookieEnd));\r\n      }\r\n    });\r\n  }\r\n\r\n  watchCookie(key) {\r\n    return this._changed.asObservable()\r\n      .filter(x => key === x)\r\n      .startWith(key)\r\n      .flatMapTo(this.getCookie(key));\r\n  }\r\n}\r\n\r\nexport const cookies = new CookieManager();","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\n'use strict';\r\n\r\nimport {getUrlParams} from './utils/url';\r\nimport {buildTag} from \"./utils/tag\";\r\nimport {defaultHtml} from \"./initial\";\r\nimport {consoleProxy} from \"./console\";\r\nimport {cookies} from './utils/cookies';\r\nimport { Observable } from 'rxjs';\r\nimport $ from 'jquery';\r\nimport CodeMirror from 'codemirror';\r\n\r\ncookies.watchCookie('example')\r\n  .subscribe(x => console.log(`Cookie is ${x}`));\r\n\r\ncookies.setCookie('example', '7.2');\r\n\r\ncookies.setCookie('example', '7.3');\r\n\r\ncookies.setCookie('example', '8.1');\r\n\r\nObservable.of('css', 'html', 'javascript')\r\n  .flatMap(\r\n    tag => Observable.fromEvent(document.getElementById('show-' + tag), 'click'),\r\n    (tag, value) => ({tag, el: value.target}))\r\n  .subscribe(({el, tag}) => {\r\n    const {classList, id} = el;\r\n\r\n    classList.toggle('btn-primary');\r\n    classList.toggle('btn-default');\r\n    classList.toggle('active');\r\n\r\n    document.getElementById(tag + '-container').classList.toggle('hidden');\r\n  });\r\n\r\n// Builds a new code editor on the page\r\nconst jsEditor = CodeMirror.fromTextArea(document.getElementById('javascript'), {\r\n  mode: \"javascript\",\r\n  theme: 'dracula',\r\n  lineNumbers: true,\r\n  readOnly: false,\r\n  value: 'Test'\r\n});\r\n\r\nconst htmlEditor = CodeMirror.fromTextArea(document.getElementById('html'), {\r\n  mode: 'htmlmixed',\r\n  theme: 'dracula',\r\n  lineNumbers: true,\r\n});\r\n\r\nhtmlEditor.setValue(defaultHtml);\r\n\r\nconst cssEditor = CodeMirror.fromTextArea(document.getElementById('css'), {\r\n  mode: 'css',\r\n  theme: 'dracula',\r\n  lineNumbers: true\r\n});\r\n\r\nconst exampleSelector = document.getElementById('example-change');\r\n\r\n// Url params always take precedence over the cookies\r\nconst urlParams = getUrlParams(window.location.search);\r\n\r\nObservable.from(exampleSelector.getElementsByTagName('option'))\r\n  .filter(({value}) => value === urlParams['example'])\r\n  .take(1)\r\n  .subscribe(x => x.selected = 'selected');\r\n\r\nconst startWithIfPresent =\r\n  (url, key) =>\r\n    source =>\r\n      url[key] ? source.startWith(url[key]) : source;\r\n\r\nObservable.fromEvent(\r\n  exampleSelector,\r\n  'change',\r\n  (e) => e.target.value\r\n)\r\n  .let(startWithIfPresent(urlParams, 'example'))\r\n  .map((e) => e.split('.')) // Split the chapter and id\r\n  .filter(value => value.length === 2) // Sanity check\r\n  .flatMap(([chapter, id]) => {\r\n    return $.getJSON(`/rest/api/example/${chapter}/${id}`);\r\n  })\r\n  .subscribe(({js, css, html}) => {\r\n    js && jsEditor.setValue(js);\r\n    css && cssEditor.setValue(css);\r\n    html && htmlEditor.setValue(html);\r\n  });\r\n\r\nconst onCodeChange = (tag) => () => {\r\n  console.log(tag, '[UPDATE]: CODE CHANGE', Date.now());\r\n};\r\n\r\nconst html$ = Observable.fromEvent(htmlEditor.doc, 'change',\r\n  (instance, change) => instance.getValue())\r\n  .do(onCodeChange('html'))\r\n  .startWith(defaultHtml)\r\n  .debounceTime(1000);\r\n\r\n// Babel compiler options\r\nconst compile$ = Observable.of({\r\n  presets: ['es2015'],\r\n  // TODO Compile this separately and load independently\r\n  plugins: [\r\n    [\"transform-object-rest-spread\", {\"useBuiltIns\": true}]\r\n  ]\r\n});\r\n\r\nconst js$ = Observable.fromEvent(jsEditor, 'change',\r\n  (instance, change) => instance.getValue())\r\n  .do(onCodeChange('js'))\r\n  .startWith('console.log(\"Welcome to RxJS in Action Code!\")')\r\n  .debounceTime(1000)\r\n  .do(() => console.log('Compiling...'))\r\n  .combineLatest(compile$, (code, opts) => {\r\n    try {\r\n      return Babel.transform(code, opts).code\r\n    } catch (e) {\r\n      console.warn('Problem compiling the code', e);\r\n      //FIXME Probably should not be returning code that babel doesn't even know how to compile\r\n      return code;\r\n    }\r\n  })\r\n  .map(buildTag('script', {type: 'application/javascript'}, function (code) {\r\n    //Naive way of preventing this from polluting the global namespace\r\n    return `;(${consoleProxy.toString().trim()})();\r\n      (function wrapper() {\r\n            ${code}\\n\r\n      })()\\n`;\r\n  }));\r\n  // .map(code =>\r\n  //   buildTag('script', {\r\n  //     type: 'application/javascript',\r\n  //     src: 'babel-polyfill/dist/polyfill.min.js'\r\n  //   })(' ') + '\\n' + code\r\n  // );\r\n\r\nconst css$ = Observable.fromEvent(cssEditor, 'change',\r\n  (instance, change) => instance.getValue())\r\n  .do(onCodeChange('css'))\r\n  .startWith('')\r\n  .debounceTime(1000)\r\n  .map(buildTag('style'));\r\n\r\nconst update$ = js$.combineLatest(html$, css$,\r\n  (javascript, html, css) => ({html, javascript, css}));\r\n\r\nexport const runtime$ = update$\r\n  .debounceTime(1000)\r\n  .do(onCodeChange('combined'))\r\n  .map(contents => {\r\n    const {javascript, html, css} = contents;\r\n    let builder = [];\r\n\r\n    try {\r\n      const endOfHead = html.indexOf('</head>');\r\n      const endOfBody = html.indexOf('</body>');\r\n\r\n      const beforeCss = html.substring(0, endOfHead);\r\n      const afterCss = html.substring(endOfHead, endOfBody);\r\n      const afterJs = html.substring(endOfBody);\r\n\r\n      builder.push(beforeCss);\r\n      builder.push(css);\r\n      builder.push(afterCss);\r\n\r\n      builder.push(javascript);\r\n      builder.push(afterJs);\r\n    } catch (e) {\r\n      console.log('Could not render content! ', e);\r\n    }\r\n\r\n    return builder.join('\\n');\r\n  });\r\n","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\n'use strict';\r\n\r\nimport {runtime$} from './editors';\r\nimport $ from 'jquery';\r\n\r\n// Get the contents of the iframe\r\nconst doc = $('#output').contents();\r\n\r\nruntime$.subscribe(\r\n  content => {\r\n    // Rewrites the contents of the iframe\r\n    // Prevents carry over from previous examples\r\n    doc[0].open();\r\n    doc[0].write(content);\r\n    doc[0].close();\r\n  },\r\n  err => {\r\n    console.warn(\"Something went wrong! Please refresh the page.\", err)\r\n  });\r\n"],"names":["getUrlParams","url","match","pl","decode","s","decodeURIComponent","replace","query","substring","urlParams","search","exec","buildTag","tagName","options","transform","x","source","attrs","k","hasOwnProperty","push","join","defaultHtml","trim","consoleProxy","console","window","log","iframe","parent","document","getElementById","consoleFrame","contentWindow","contentDocument","write","open","content","close","val","previous","body","innerHTML","CookieManager","_changed","Subject","key","next","value","opts","path","expires","cookie","_notifyChanged","Observable","defer","cookies","cookieStart","indexOf","empty","valueStart","cookieEnd","length","of","asObservable","filter","startWith","flatMapTo","getCookie","watchCookie","subscribe","setCookie","flatMap","fromEvent","tag","el","target","classList","toggle","jsEditor","CodeMirror","fromTextArea","htmlEditor","setValue","cssEditor","exampleSelector","location","from","getElementsByTagName","take","selected","startWithIfPresent","e","let","map","split","chapter","id","$","getJSON","js","css","html","onCodeChange","Date","now","html$","doc","instance","change","getValue","do","debounceTime","compile$","js$","combineLatest","code","Babel","warn","type","toString","css$","update$","javascript","runtime$","contents","builder","endOfHead","endOfBody","beforeCss","afterCss","afterJs","err"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}